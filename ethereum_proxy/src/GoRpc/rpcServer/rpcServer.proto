syntax = "proto3";

package rpcServer;

service Greeter {

  rpc GetBlank(BlankRequest) returns (BlankReply) {}

  rpc CreateCard(CreateCardRequest) returns (BlankReply) {}
  rpc GetCardsByOwner(CardsRequest) returns (CardsReply) {}

  rpc RequestBattleGroupInfo(BattleGroupInfoRequest) returns (BattleGroupInfoReply) {}
  rpc RequestCardInfo(CardInfoRequest) returns (CardInfoReply) {}
  rpc RequestBattleInfo(BattleInfoRequest) returns (BattleInfoReply) {}

  rpc PerformECRecover(ECRecoverRequest) returns (ECRecoverReply) {}
}

message BlankRequest {
  string name = 1;
}

message BlankReply {
  string message = 1;  
}

message CardsRequest {
  string address = 1;  
}

message CardsReply {
  uint64 creationTime = 1;
  uint64 battleCooldownEnd = 2;
  uint32 creationBattleID = 3;
  uint32 currentBattleID = 4;
  string attributes = 5;
}

message CoreContractAddress {
  string address = 1;
}


message BattleGroupInfo {
  string ownerAddress = 1;
  uint64 id = 2;
  repeated uint64 cards = 3;
 }

message BattleGroupInfoReply {
 repeated BattleGroupInfo items = 1;
}

message BattleGroupInfoRequest {
  CoreContractAddress contract = 1;
}                 

message CreateCardRequest {
  string ownerAddress = 1;
  CoreContractAddress coreAddress = 2;
}

message CardInfo {
  string ownerAddress = 1;
  uint64 id = 2;
  uint64 creationBattleId = 3;
  uint64 attributes = 4;
 }

message CardInfoReply {
 repeated CardInfo items = 1;
}

message CardInfoRequest {
  CoreContractAddress contract = 1;
}    

message BattleInfo {
  uint64 id = 1;
  uint64 winnerGroupId = 2;
  uint64 loserGroupId = 3;
 }

message BattleInfoReply {
 repeated BattleInfo battles= 1;
}

message BattleInfoRequest {
  CoreContractAddress coreAddress = 1;
} 


message ECRecoverRequest {
  string address = 1;
  string signed = 2;
  string plaintext = 3;
}

message ECRecoverReply {
  bool success = 1;
}
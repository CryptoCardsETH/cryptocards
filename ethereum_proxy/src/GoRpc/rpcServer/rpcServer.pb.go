// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpcServer.proto

/*
Package rpcServer is a generated protocol buffer package.

It is generated from these files:
	rpcServer.proto

It has these top-level messages:
	BlankRequest
	BlankReply
	CardsRequest
	CardsReply
	ContractAddresses
	ContractAddress
	BattleGroupInfo
	BattleGroupInfoReply
	BattleGroupInfoRequest
*/
package rpcServer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BlankRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *BlankRequest) Reset()                    { *m = BlankRequest{} }
func (m *BlankRequest) String() string            { return proto.CompactTextString(m) }
func (*BlankRequest) ProtoMessage()               {}
func (*BlankRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BlankRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type BlankReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *BlankReply) Reset()                    { *m = BlankReply{} }
func (m *BlankReply) String() string            { return proto.CompactTextString(m) }
func (*BlankReply) ProtoMessage()               {}
func (*BlankReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BlankReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CardsRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *CardsRequest) Reset()                    { *m = CardsRequest{} }
func (m *CardsRequest) String() string            { return proto.CompactTextString(m) }
func (*CardsRequest) ProtoMessage()               {}
func (*CardsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CardsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type CardsReply struct {
	CreationTime      uint64 `protobuf:"varint,1,opt,name=creationTime" json:"creationTime,omitempty"`
	BattleCooldownEnd uint64 `protobuf:"varint,2,opt,name=battleCooldownEnd" json:"battleCooldownEnd,omitempty"`
	CreationBattleID  uint32 `protobuf:"varint,3,opt,name=creationBattleID" json:"creationBattleID,omitempty"`
	CurrentBattleID   uint32 `protobuf:"varint,4,opt,name=currentBattleID" json:"currentBattleID,omitempty"`
	Attributes        string `protobuf:"bytes,5,opt,name=attributes" json:"attributes,omitempty"`
}

func (m *CardsReply) Reset()                    { *m = CardsReply{} }
func (m *CardsReply) String() string            { return proto.CompactTextString(m) }
func (*CardsReply) ProtoMessage()               {}
func (*CardsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CardsReply) GetCreationTime() uint64 {
	if m != nil {
		return m.CreationTime
	}
	return 0
}

func (m *CardsReply) GetBattleCooldownEnd() uint64 {
	if m != nil {
		return m.BattleCooldownEnd
	}
	return 0
}

func (m *CardsReply) GetCreationBattleID() uint32 {
	if m != nil {
		return m.CreationBattleID
	}
	return 0
}

func (m *CardsReply) GetCurrentBattleID() uint32 {
	if m != nil {
		return m.CurrentBattleID
	}
	return 0
}

func (m *CardsReply) GetAttributes() string {
	if m != nil {
		return m.Attributes
	}
	return ""
}

type ContractAddresses struct {
	Items []*ContractAddress `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *ContractAddresses) Reset()                    { *m = ContractAddresses{} }
func (m *ContractAddresses) String() string            { return proto.CompactTextString(m) }
func (*ContractAddresses) ProtoMessage()               {}
func (*ContractAddresses) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ContractAddresses) GetItems() []*ContractAddress {
	if m != nil {
		return m.Items
	}
	return nil
}

type ContractAddress struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
}

func (m *ContractAddress) Reset()                    { *m = ContractAddress{} }
func (m *ContractAddress) String() string            { return proto.CompactTextString(m) }
func (*ContractAddress) ProtoMessage()               {}
func (*ContractAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ContractAddress) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ContractAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type BattleGroupInfo struct {
	OwnerAddress string   `protobuf:"bytes,1,opt,name=ownerAddress" json:"ownerAddress,omitempty"`
	Id           uint64   `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Cards        []uint64 `protobuf:"varint,3,rep,packed,name=cards" json:"cards,omitempty"`
}

func (m *BattleGroupInfo) Reset()                    { *m = BattleGroupInfo{} }
func (m *BattleGroupInfo) String() string            { return proto.CompactTextString(m) }
func (*BattleGroupInfo) ProtoMessage()               {}
func (*BattleGroupInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *BattleGroupInfo) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *BattleGroupInfo) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BattleGroupInfo) GetCards() []uint64 {
	if m != nil {
		return m.Cards
	}
	return nil
}

type BattleGroupInfoReply struct {
	Items []*BattleGroupInfo `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *BattleGroupInfoReply) Reset()                    { *m = BattleGroupInfoReply{} }
func (m *BattleGroupInfoReply) String() string            { return proto.CompactTextString(m) }
func (*BattleGroupInfoReply) ProtoMessage()               {}
func (*BattleGroupInfoReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *BattleGroupInfoReply) GetItems() []*BattleGroupInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type BattleGroupInfoRequest struct {
	Contract *ContractAddress `protobuf:"bytes,1,opt,name=contract" json:"contract,omitempty"`
}

func (m *BattleGroupInfoRequest) Reset()                    { *m = BattleGroupInfoRequest{} }
func (m *BattleGroupInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*BattleGroupInfoRequest) ProtoMessage()               {}
func (*BattleGroupInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *BattleGroupInfoRequest) GetContract() *ContractAddress {
	if m != nil {
		return m.Contract
	}
	return nil
}

func init() {
	proto.RegisterType((*BlankRequest)(nil), "rpcServer.BlankRequest")
	proto.RegisterType((*BlankReply)(nil), "rpcServer.BlankReply")
	proto.RegisterType((*CardsRequest)(nil), "rpcServer.CardsRequest")
	proto.RegisterType((*CardsReply)(nil), "rpcServer.CardsReply")
	proto.RegisterType((*ContractAddresses)(nil), "rpcServer.ContractAddresses")
	proto.RegisterType((*ContractAddress)(nil), "rpcServer.ContractAddress")
	proto.RegisterType((*BattleGroupInfo)(nil), "rpcServer.BattleGroupInfo")
	proto.RegisterType((*BattleGroupInfoReply)(nil), "rpcServer.BattleGroupInfoReply")
	proto.RegisterType((*BattleGroupInfoRequest)(nil), "rpcServer.BattleGroupInfoRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Greeter service

type GreeterClient interface {
	GetBlank(ctx context.Context, in *BlankRequest, opts ...grpc.CallOption) (*BlankReply, error)
	GetCardsByOwner(ctx context.Context, in *CardsRequest, opts ...grpc.CallOption) (*CardsReply, error)
	AnnounceContractAddresses(ctx context.Context, in *ContractAddresses, opts ...grpc.CallOption) (*BlankReply, error)
	RequestBattleGroupInfo(ctx context.Context, in *BattleGroupInfoRequest, opts ...grpc.CallOption) (*BattleGroupInfoReply, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) GetBlank(ctx context.Context, in *BlankRequest, opts ...grpc.CallOption) (*BlankReply, error) {
	out := new(BlankReply)
	err := grpc.Invoke(ctx, "/rpcServer.Greeter/GetBlank", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) GetCardsByOwner(ctx context.Context, in *CardsRequest, opts ...grpc.CallOption) (*CardsReply, error) {
	out := new(CardsReply)
	err := grpc.Invoke(ctx, "/rpcServer.Greeter/GetCardsByOwner", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) AnnounceContractAddresses(ctx context.Context, in *ContractAddresses, opts ...grpc.CallOption) (*BlankReply, error) {
	out := new(BlankReply)
	err := grpc.Invoke(ctx, "/rpcServer.Greeter/AnnounceContractAddresses", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) RequestBattleGroupInfo(ctx context.Context, in *BattleGroupInfoRequest, opts ...grpc.CallOption) (*BattleGroupInfoReply, error) {
	out := new(BattleGroupInfoReply)
	err := grpc.Invoke(ctx, "/rpcServer.Greeter/RequestBattleGroupInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Greeter service

type GreeterServer interface {
	GetBlank(context.Context, *BlankRequest) (*BlankReply, error)
	GetCardsByOwner(context.Context, *CardsRequest) (*CardsReply, error)
	AnnounceContractAddresses(context.Context, *ContractAddresses) (*BlankReply, error)
	RequestBattleGroupInfo(context.Context, *BattleGroupInfoRequest) (*BattleGroupInfoReply, error)
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_GetBlank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).GetBlank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcServer.Greeter/GetBlank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).GetBlank(ctx, req.(*BlankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_GetCardsByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).GetCardsByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcServer.Greeter/GetCardsByOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).GetCardsByOwner(ctx, req.(*CardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_AnnounceContractAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractAddresses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).AnnounceContractAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcServer.Greeter/AnnounceContractAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).AnnounceContractAddresses(ctx, req.(*ContractAddresses))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_RequestBattleGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BattleGroupInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).RequestBattleGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcServer.Greeter/RequestBattleGroupInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).RequestBattleGroupInfo(ctx, req.(*BattleGroupInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcServer.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlank",
			Handler:    _Greeter_GetBlank_Handler,
		},
		{
			MethodName: "GetCardsByOwner",
			Handler:    _Greeter_GetCardsByOwner_Handler,
		},
		{
			MethodName: "AnnounceContractAddresses",
			Handler:    _Greeter_AnnounceContractAddresses_Handler,
		},
		{
			MethodName: "RequestBattleGroupInfo",
			Handler:    _Greeter_RequestBattleGroupInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcServer.proto",
}

func init() { proto.RegisterFile("rpcServer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 460 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x6d, 0x9c, 0x84, 0xb4, 0x43, 0xc0, 0x74, 0x55, 0x8a, 0xa9, 0x10, 0x84, 0x3d, 0x20, 0x0b,
	0xa1, 0x0a, 0x15, 0x89, 0x13, 0x12, 0x4a, 0x4c, 0x65, 0x7a, 0x02, 0x19, 0x6e, 0x48, 0x48, 0x1b,
	0x7b, 0x40, 0x16, 0xce, 0xae, 0xd9, 0x5d, 0x53, 0xe5, 0xdf, 0xf1, 0x23, 0xf8, 0x41, 0xc8, 0xeb,
	0x75, 0xea, 0x8f, 0xc6, 0xb7, 0xcc, 0xcc, 0xcb, 0xdb, 0x99, 0xf7, 0x9e, 0x0c, 0xae, 0xcc, 0xe3,
	0x2f, 0x28, 0xff, 0xa0, 0x3c, 0xcf, 0xa5, 0xd0, 0x82, 0x1c, 0xed, 0x1a, 0x94, 0xc2, 0x7c, 0x95,
	0x31, 0xfe, 0x2b, 0xc2, 0xdf, 0x05, 0x2a, 0x4d, 0x08, 0x4c, 0x38, 0xdb, 0xa0, 0x37, 0x5a, 0x8c,
	0xfc, 0xa3, 0xc8, 0xfc, 0xa6, 0x2f, 0x00, 0x2c, 0x26, 0xcf, 0xb6, 0xc4, 0x83, 0xd9, 0x06, 0x95,
	0x62, 0x3f, 0x6b, 0x50, 0x5d, 0x52, 0x1f, 0xe6, 0x01, 0x93, 0x89, 0xaa, 0xb9, 0x3c, 0x98, 0xb1,
	0x24, 0x91, 0xa8, 0x54, 0x8d, 0xb4, 0x25, 0xfd, 0x37, 0x02, 0xb0, 0xd0, 0x92, 0x92, 0xc2, 0x3c,
	0x96, 0xc8, 0x74, 0x2a, 0xf8, 0xd7, 0xd4, 0x3e, 0x3e, 0x89, 0x5a, 0x3d, 0xf2, 0x0a, 0x8e, 0xd7,
	0x4c, 0xeb, 0x0c, 0x03, 0x21, 0xb2, 0x44, 0x5c, 0xf3, 0x4b, 0x9e, 0x78, 0x8e, 0x01, 0xf6, 0x07,
	0xe4, 0x25, 0x3c, 0xa8, 0xff, 0xbd, 0x32, 0xc3, 0xab, 0x0f, 0xde, 0x78, 0x31, 0xf2, 0xef, 0x45,
	0xbd, 0x3e, 0xf1, 0xc1, 0x8d, 0x0b, 0x29, 0x91, 0xeb, 0x1d, 0x74, 0x62, 0xa0, 0xdd, 0x36, 0x79,
	0x0a, 0xc0, 0xb4, 0x96, 0xe9, 0xba, 0xd0, 0xa8, 0xbc, 0xa9, 0xb9, 0xa9, 0xd1, 0xa1, 0x97, 0x70,
	0x1c, 0x08, 0xae, 0x25, 0x8b, 0xf5, 0xb2, 0xba, 0x14, 0x15, 0x79, 0x0d, 0xd3, 0x54, 0xe3, 0xa6,
	0xd4, 0x60, 0xec, 0xdf, 0xbd, 0x38, 0x3b, 0xbf, 0x71, 0xa3, 0x03, 0x8e, 0x2a, 0x20, 0x7d, 0x0f,
	0x6e, 0x67, 0x72, 0x9b, 0x2d, 0x4d, 0x79, 0x9d, 0xb6, 0xbc, 0xdf, 0xc0, 0xad, 0x76, 0x0e, 0xa5,
	0x28, 0xf2, 0x2b, 0xfe, 0x43, 0x94, 0x12, 0x8b, 0x6b, 0x8e, 0x72, 0xd9, 0x32, 0xa4, 0xd5, 0x23,
	0xf7, 0xc1, 0x49, 0x6b, 0x4d, 0x9d, 0x34, 0x21, 0x27, 0x30, 0x8d, 0x4b, 0x93, 0xbc, 0xf1, 0x62,
	0xec, 0x4f, 0xa2, 0xaa, 0xa0, 0x1f, 0xe1, 0xa4, 0x43, 0x5e, 0x99, 0x38, 0x70, 0x67, 0x17, 0x6f,
	0xef, 0xfc, 0x0c, 0xa7, 0x3d, 0xa6, 0x2a, 0x39, 0x6f, 0xe1, 0x30, 0xb6, 0x0a, 0x98, 0x4d, 0x87,
	0x65, 0xdb, 0x61, 0x2f, 0xfe, 0x3a, 0x30, 0x0b, 0x25, 0xa2, 0x46, 0x49, 0xde, 0xc1, 0x61, 0x88,
	0xda, 0x04, 0x97, 0x3c, 0x6a, 0x2e, 0xd3, 0x88, 0xfb, 0xd9, 0xc3, 0xfe, 0x20, 0xcf, 0xb6, 0xf4,
	0x80, 0x04, 0xe0, 0x86, 0xa8, 0x4d, 0x46, 0x57, 0xdb, 0x4f, 0xa5, 0x4a, 0x2d, 0x92, 0x66, 0xce,
	0x5b, 0x24, 0x37, 0xa9, 0xa6, 0x07, 0x24, 0x82, 0xc7, 0x4b, 0xce, 0x45, 0xc1, 0x63, 0xec, 0xe7,
	0xe2, 0xc9, 0xfe, 0x8b, 0x50, 0xed, 0x5f, 0xec, 0x3b, 0x9c, 0xda, 0x77, 0xbb, 0x16, 0x3f, 0x1f,
	0x50, 0xdc, 0x6e, 0xfa, 0x6c, 0x08, 0x62, 0xf8, 0xd7, 0x77, 0xcc, 0x27, 0xe2, 0xcd, 0xff, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x97, 0xdc, 0x42, 0x2a, 0x35, 0x04, 0x00, 0x00,
}
